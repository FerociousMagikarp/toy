name: Toy

on: [push, pull_request]

jobs:
  linux-build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        compiler: [gcc-12, clang-15]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          if [[ "${{ matrix.compiler }}" == gcc-12 ]]; then
            sudo apt-get install -y gcc-12 g++-12
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 90
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 90
          else
            sudo apt-get install -y clang-15
            sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 90
            sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-15 90
          fi

      - name: Configure CMake GCC
        if: matrix.compiler == 'gcc-12'
        run: |
          mkdir build && cd build
          cmake .. \
            -DCMAKE_C_COMPILER=gcc-12 -DCMAKE_CXX_COMPILER=g++-12 -DTOY_BUILD_TEST=ON -DTOY_BUILD_BENCHMARK=ON -DCMAKE_BUILD_TYPE=Release

      - name: Configure CMake Clang
        if: matrix.compiler == 'clang-15'
        run: |
          mkdir build && cd build
          cmake .. \
            -DCMAKE_C_COMPILER=clang-15 -DCMAKE_CXX_COMPILER=clang++-15 -DTOY_BUILD_TEST=ON -DTOY_BUILD_BENCHMARK=ON -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: |
          cd build
          cmake --build . --parallel $(nproc)

      - name: Run Tests
        shell: bash
        run: |
          ./build/test/toy_test
          ./build/test/benchmark/toy_bench

  windows-msvc-build:
    name: Windows (MSVC)
    runs-on: windows-2022
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # CMake 工具链配置
      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DTOY_BUILD_TEST=ON `
            -DTOY_BUILD_BENCHMARK=ON `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded `
            -DCMAKE_CXX_FLAGS_RELEASE="/O2 /Ob2 /fp:fast"

      - name: Build
        run: |
          cd build
          cmake --build . --config Release --parallel 4

      - name: Run Tests
        shell: bash
        run: |
          ./build/test/Release/toy_test.exe
          ./build/test/benchmark/Release/toy_bench.exe

  macos-build:
    runs-on: macos-13
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DTOY_BUILD_TEST=ON \
            -DTOY_BUILD_BENCHMARK=ON \
            -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: |
          cd build
          cmake --build . --parallel $(sysctl -n hw.logicalcpu)

      - name: Run Tests
        shell: bash
        run: |
          ./build/test/toy_test
          ./build/test/benchmark/toy_bench

  coverage:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-12 g++-12
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 90
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 90
        sudo apt-get install -y cmake g++ python3-pip
        pip install gcovr

    - name: Configure with coverage
      run: |
        mkdir build && cd build
        cmake .. \
          -DCMAKE_C_COMPILER=gcc-12 -DCMAKE_CXX_COMPILER=g++-12 -DTOY_BUILD_TEST=ON -DTOY_ENABLE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug

    - name: Build
      run: |
        cd build
        cmake --build . --parallel $(nproc)

    - name: Run doctests
      shell: bash
      run: |
        cd build/test
        ./toy_test --no-exitcode
        find . -name '*.gcda' -exec chmod a+r {} +

    - name: Generate report
      run: |
        gcovr --root . \
              --gcov-executable "gcov-12 -l -p" \
              --exclude test/ \
              --exclude build/ \
              --exclude-throw-branches \
              --exclude-unreachable-branches \
              --xml coverage.xml \
              --html coverage.html \
              --html-details \
              --print-summary \
              --verbose

    - name: Upload to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: coverage.xml
        verbose: true

